{"version":3,"sources":["webpack://warp/webpack/universalModuleDefinition","webpack://warp/webpack/bootstrap","webpack://warp/./src/lib/shaders/basic-vertex-shader.glsl","webpack://warp/./src/lib/shaders/basic-fragment-shader.glsl","webpack://warp/./node_modules/gl-matrix/lib/gl-matrix/common.js","webpack://warp/./node_modules/gl-matrix/lib/gl-matrix/mat4.js","webpack://warp/./node_modules/gl-matrix/lib/gl-matrix/vec3.js","webpack://warp/./node_modules/gl-matrix/lib/gl-matrix/vec4.js","webpack://warp/./node_modules/gl-matrix/lib/gl-matrix/quat.js","webpack://warp/./node_modules/gl-matrix/lib/gl-matrix/mat3.js","webpack://warp/./src/lib/core/constants.js","webpack://warp/./src/lib/core/shader-builder.js","webpack://warp/./src/lib/core/realm.js","webpack://warp/./src/lib/importer/gltf.js","webpack://warp/./src/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","PI","out","clone","a","copy","fromValues","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","set","identity","transpose","a01","a02","a03","a12","a13","a23","invert","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","adjoint","determinant","multiply","b","b0","b1","b2","b3","translate","v","x","y","z","mat4_scale","rotate","rad","axis","b12","b20","b21","b22","len","sqrt","sin","cos","rotateX","rotateY","rotateZ","fromTranslation","fromScaling","fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","fromQuat","yx","zx","zy","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","abs","targetTo","target","str","frob","pow","add","subtract","multiplyScalar","multiplyScalarAndAdd","scale","exactEquals","mat4_equals","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","a14","a15","b4","b5","b6","b7","b8","b9","b13","b14","b15","max","mul","sub","vec3_create","vec3_clone","vec3_length","vec3_fromValues","vec3_copy","vec3_set","vec3_add","vec3_subtract","vec3_multiply","divide","ceil","floor","min","round","vec3_scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","vec3_dot","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","vec3_rotateX","vec3_rotateY","vec3_rotateZ","angle","tempA","tempB","cosine","acos","vec3_str","vec3_exactEquals","vec3_equals","vec","vec3_sub","vec3_mul","div","dist","sqrDist","vec3_len","sqrLen","forEach","stride","offset","count","fn","arg","length","vec4_length","vec4_squaredLength","quat_create","quat_identity","setAxisAngle","getAxisAngle","out_axis","quat_multiply","quat_rotateX","quat_rotateY","quat_rotateZ","calculateW","slerp","omega","cosom","sinom","scale0","scale1","quat_random","u1","u2","u3","sqrt1MinusU1","sqrtU1","quat_invert","dot","invDot","conjugate","fromMat3","fTrace","fRoot","j","k","fromEuler","halfToRad","cx","cy","cz","quat_str","tmpvec3","xUnitVec3","yUnitVec3","temp1","temp2","matr","quat_clone","quat_fromValues","quat_copy","quat_set","quat_add","quat_mul","quat_scale","quat_dot","quat_lerp","quat_length","quat_len","quat_squaredLength","quat_sqrLen","quat_normalize","quat_exactEquals","quat_equals","rotationTo","sqlerp","setAxes","view","COMPONENT","freeze","SIZE","5120","5121","5122","5123","5125","5126","TYPE","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","UNSIGNED_INT","FLOAT","ID","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","ATTRIBUTE_LOCATION","ORTHOGRAPHIC","PERSPECTIVE","POSITION","NORMAL","TEXCOORD_0","JOINTS_0","JOINTS_1","WEIGHTS_0","WEIGHTS_1","TANGENT","INDEX","type","componentType","TEXCOORD_1","COLOR_0","ELEMENT_ARRAY_BUFFER","ARRAY_BUFFER","compile","gl","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","Error","getShaderInfoLog","updateWorldMatrix","node","parent","mat4_namespaceObject","worldMatrix","matrix","needsUpdate","children","SUPPORTED_VERSION","split","map","parseInt","__webpack_exports__","realm","width","height","document","createElement","getContext","domElement","canvas","viewport","clearColor","enable","DEPTH_TEST","CULL_FACE","initializeContext","program","vertexShaderSource","fragmentShaderSource","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","shader_builder","basic_vertex_shader_default","basic_fragment_shader_default","useProgram","buffers","bufferViews","accessors","cameras","meshes","nodes","scenes","scene","[object Object]","this","drawables","mesh","primitives","push","setScene","load","primitive","vao","createVertexArray","bindVertexArray","indices","accessor","bufferView","element_array_buffer","bindBuffer","bufferAccessCount","buffer","createBuffer","dataView","DataView","byteOffset","byteLength","bufferData","STATIC_DRAW","attributes","console","log","array_buffer","vertexAttribPointer","normalized","byteStride","enableVertexAttribArray","drawable","viewMatrix","modelViewMatrix","uniformMatrix4fv","getUniformLocation","drawElements","drawArrays","TRIANGLES","renderQueue","cameraNode","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","camera","projectionMatrix","yfov","aspectRatio","znear","zfar","draw","importGLTF","raw","JSON","parse","version","asset","minVersion","Promise","all","uri","fetch","then","res","arrayBuffer","rotation","quat_namespaceObject","vec3_namespaceObject"],"mappings":"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","file":"warp.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"warp\"] = factory();\n\telse\n\t\troot[\"warp\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","module.exports = \"#version 300 es\\r\\n\\r\\nprecision highp float;\\r\\n\\r\\nlayout(location = 0) in vec4 vPosition;\\r\\n\\r\\nuniform mat4 projectionMatrix;\\r\\nuniform mat4 modelViewMatrix;\\r\\n\\r\\nvoid main() {\\r\\n    gl_Position = projectionMatrix * modelViewMatrix * vPosition;\\r\\n}\"","module.exports = \"#version 300 es\\r\\n\\r\\nprecision highp float;\\r\\n\\r\\nuniform vec4 color;\\r\\n\\r\\nout vec4 fColor;\\r\\n\\r\\nvoid main() {\\r\\n    fColor = vec4(1.0, 0.0, 0.0, 1.0);\\r\\n}\"","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\r\n\r\n// Configuration Constants\r\nexport var EPSILON = 0.000001;\r\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\r\nexport var RANDOM = Math.random;\r\n\r\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\r\nexport function setMatrixArrayType(type) {\r\n  ARRAY_TYPE = type;\r\n}\r\n\r\nvar degree = Math.PI / 180;\r\n\r\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\r\nexport function toRadian(a) {\r\n  return a * degree;\r\n}\r\n\r\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\r\n}","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\r\n\r\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[5] = 1;\r\n  out[10] = 1;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\r\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\r\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a03 = a[3];\r\n    var a12 = a[6],\r\n        a13 = a[7];\r\n    var a23 = a[11];\r\n\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a01;\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a02;\r\n    out[9] = a12;\r\n    out[11] = a[14];\r\n    out[12] = a03;\r\n    out[13] = a13;\r\n    out[14] = a23;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a[1];\r\n    out[5] = a[5];\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a[2];\r\n    out[9] = a[6];\r\n    out[10] = a[10];\r\n    out[11] = a[14];\r\n    out[12] = a[3];\r\n    out[13] = a[7];\r\n    out[14] = a[11];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\r\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\r\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\r\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\r\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\r\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\r\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\r\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\r\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\r\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\r\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\r\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\r\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\r\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\r\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\r\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n}\r\n\r\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  // Cache only the current line of the second matrix\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[4];b1 = b[5];b2 = b[6];b3 = b[7];\r\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[8];b1 = b[9];b2 = b[10];b3 = b[11];\r\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[12];b1 = b[13];b2 = b[14];b3 = b[15];\r\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n\r\n  if (a === out) {\r\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\r\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\r\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\r\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\r\n  } else {\r\n    a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n    a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n    a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n    out[0] = a00;out[1] = a01;out[2] = a02;out[3] = a03;\r\n    out[4] = a10;out[5] = a11;out[6] = a12;out[7] = a13;\r\n    out[8] = a20;out[9] = a21;out[10] = a22;out[11] = a23;\r\n\r\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\r\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\r\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\r\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n\r\n  out[0] = a[0] * x;\r\n  out[1] = a[1] * x;\r\n  out[2] = a[2] * x;\r\n  out[3] = a[3] * x;\r\n  out[4] = a[4] * y;\r\n  out[5] = a[5] * y;\r\n  out[6] = a[6] * y;\r\n  out[7] = a[7] * y;\r\n  out[8] = a[8] * z;\r\n  out[9] = a[9] * z;\r\n  out[10] = a[10] * z;\r\n  out[11] = a[11] * z;\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function rotate(out, a, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n  var b00 = void 0,\r\n      b01 = void 0,\r\n      b02 = void 0;\r\n  var b10 = void 0,\r\n      b11 = void 0,\r\n      b12 = void 0;\r\n  var b20 = void 0,\r\n      b21 = void 0,\r\n      b22 = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n  a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n  a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n  // Construct the elements of the rotation matrix\r\n  b00 = x * x * t + c;b01 = y * x * t + z * s;b02 = z * x * t - y * s;\r\n  b10 = x * y * t - z * s;b11 = y * y * t + c;b12 = z * y * t + x * s;\r\n  b20 = x * z * t + y * s;b21 = y * z * t - x * s;b22 = z * z * t + c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[4] = a10 * c + a20 * s;\r\n  out[5] = a11 * c + a21 * s;\r\n  out[6] = a12 * c + a22 * s;\r\n  out[7] = a13 * c + a23 * s;\r\n  out[8] = a20 * c - a10 * s;\r\n  out[9] = a21 * c - a11 * s;\r\n  out[10] = a22 * c - a12 * s;\r\n  out[11] = a23 * c - a13 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[4] = a[4];\r\n    out[5] = a[5];\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c - a20 * s;\r\n  out[1] = a01 * c - a21 * s;\r\n  out[2] = a02 * c - a22 * s;\r\n  out[3] = a03 * c - a23 * s;\r\n  out[8] = a00 * s + a20 * c;\r\n  out[9] = a01 * s + a21 * c;\r\n  out[10] = a02 * s + a22 * c;\r\n  out[11] = a03 * s + a23 * c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[8] = a[8];\r\n    out[9] = a[9];\r\n    out[10] = a[10];\r\n    out[11] = a[11];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c + a10 * s;\r\n  out[1] = a01 * c + a11 * s;\r\n  out[2] = a02 * c + a12 * s;\r\n  out[3] = a03 * c + a13 * s;\r\n  out[4] = a10 * c - a00 * s;\r\n  out[5] = a11 * c - a01 * s;\r\n  out[6] = a12 * c - a02 * s;\r\n  out[7] = a13 * c - a03 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = v[1];\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = v[2];\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotation(out, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = x * x * t + c;\r\n  out[1] = y * x * t + z * s;\r\n  out[2] = z * x * t - y * s;\r\n  out[3] = 0;\r\n  out[4] = x * y * t - z * s;\r\n  out[5] = y * y * t + c;\r\n  out[6] = z * y * t + x * s;\r\n  out[7] = 0;\r\n  out[8] = x * z * t + y * s;\r\n  out[9] = y * z * t - x * s;\r\n  out[10] = z * z * t + c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromXRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = c;\r\n  out[6] = s;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = -s;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromYRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = 0;\r\n  out[2] = -s;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = s;\r\n  out[9] = 0;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromZRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -s;\r\n  out[5] = c;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslation(out, q, v) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - (yy + zz);\r\n  out[1] = xy + wz;\r\n  out[2] = xz - wy;\r\n  out[3] = 0;\r\n  out[4] = xy - wz;\r\n  out[5] = 1 - (xx + zz);\r\n  out[6] = yz + wx;\r\n  out[7] = 0;\r\n  out[8] = xz + wy;\r\n  out[9] = yz - wx;\r\n  out[10] = 1 - (xx + yy);\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\r\nexport function fromQuat2(out, a) {\r\n  var translation = new glMatrix.ARRAY_TYPE(3);\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7];\r\n\r\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw;\r\n  //Only scale if it makes sense\r\n  if (magnitude > 0) {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\r\n  } else {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\r\n  }\r\n  fromRotationTranslation(out, a, translation);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getTranslation(out, mat) {\r\n  out[0] = mat[12];\r\n  out[1] = mat[13];\r\n  out[2] = mat[14];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getScaling(out, mat) {\r\n  var m11 = mat[0];\r\n  var m12 = mat[1];\r\n  var m13 = mat[2];\r\n  var m21 = mat[4];\r\n  var m22 = mat[5];\r\n  var m23 = mat[6];\r\n  var m31 = mat[8];\r\n  var m32 = mat[9];\r\n  var m33 = mat[10];\r\n\r\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\r\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\r\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\r\nexport function getRotation(out, mat) {\r\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n  var trace = mat[0] + mat[5] + mat[10];\r\n  var S = 0;\r\n\r\n  if (trace > 0) {\r\n    S = Math.sqrt(trace + 1.0) * 2;\r\n    out[3] = 0.25 * S;\r\n    out[0] = (mat[6] - mat[9]) / S;\r\n    out[1] = (mat[8] - mat[2]) / S;\r\n    out[2] = (mat[1] - mat[4]) / S;\r\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\r\n    out[3] = (mat[6] - mat[9]) / S;\r\n    out[0] = 0.25 * S;\r\n    out[1] = (mat[1] + mat[4]) / S;\r\n    out[2] = (mat[8] + mat[2]) / S;\r\n  } else if (mat[5] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\r\n    out[3] = (mat[8] - mat[2]) / S;\r\n    out[0] = (mat[1] + mat[4]) / S;\r\n    out[1] = 0.25 * S;\r\n    out[2] = (mat[6] + mat[9]) / S;\r\n  } else {\r\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\r\n    out[3] = (mat[1] - mat[4]) / S;\r\n    out[0] = (mat[8] + mat[2]) / S;\r\n    out[1] = (mat[6] + mat[9]) / S;\r\n    out[2] = 0.25 * S;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScale(out, q, v, s) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  out[0] = (1 - (yy + zz)) * sx;\r\n  out[1] = (xy + wz) * sx;\r\n  out[2] = (xz - wy) * sx;\r\n  out[3] = 0;\r\n  out[4] = (xy - wz) * sy;\r\n  out[5] = (1 - (xx + zz)) * sy;\r\n  out[6] = (yz + wx) * sy;\r\n  out[7] = 0;\r\n  out[8] = (xz + wy) * sz;\r\n  out[9] = (yz - wx) * sz;\r\n  out[10] = (1 - (xx + yy)) * sz;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  var ox = o[0];\r\n  var oy = o[1];\r\n  var oz = o[2];\r\n\r\n  var out0 = (1 - (yy + zz)) * sx;\r\n  var out1 = (xy + wz) * sx;\r\n  var out2 = (xz - wy) * sx;\r\n  var out4 = (xy - wz) * sy;\r\n  var out5 = (1 - (xx + zz)) * sy;\r\n  var out6 = (yz + wx) * sy;\r\n  var out8 = (xz + wy) * sz;\r\n  var out9 = (yz - wx) * sz;\r\n  var out10 = (1 - (xx + yy)) * sz;\r\n\r\n  out[0] = out0;\r\n  out[1] = out1;\r\n  out[2] = out2;\r\n  out[3] = 0;\r\n  out[4] = out4;\r\n  out[5] = out5;\r\n  out[6] = out6;\r\n  out[7] = 0;\r\n  out[8] = out8;\r\n  out[9] = out9;\r\n  out[10] = out10;\r\n  out[11] = 0;\r\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\r\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\r\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[1] = yx + wz;\r\n  out[2] = zx - wy;\r\n  out[3] = 0;\r\n\r\n  out[4] = yx - wz;\r\n  out[5] = 1 - xx - zz;\r\n  out[6] = zy + wx;\r\n  out[7] = 0;\r\n\r\n  out[8] = zx + wy;\r\n  out[9] = zy - wx;\r\n  out[10] = 1 - xx - yy;\r\n  out[11] = 0;\r\n\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function frustum(out, left, right, bottom, top, near, far) {\r\n  var rl = 1 / (right - left);\r\n  var tb = 1 / (top - bottom);\r\n  var nf = 1 / (near - far);\r\n  out[0] = near * 2 * rl;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = near * 2 * tb;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = (right + left) * rl;\r\n  out[9] = (top + bottom) * tb;\r\n  out[10] = (far + near) * nf;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = far * near * 2 * nf;\r\n  out[15] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\r\nexport function perspective(out, fovy, aspect, near, far) {\r\n  var f = 1.0 / Math.tan(fovy / 2),\r\n      nf = void 0;\r\n  out[0] = f / aspect;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = f;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[15] = 0;\r\n  if (far != null && far !== Infinity) {\r\n    nf = 1 / (near - far);\r\n    out[10] = (far + near) * nf;\r\n    out[14] = 2 * far * near * nf;\r\n  } else {\r\n    out[10] = -1;\r\n    out[14] = -2 * near;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\r\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\r\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\r\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\r\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\r\n  var xScale = 2.0 / (leftTan + rightTan);\r\n  var yScale = 2.0 / (upTan + downTan);\r\n\r\n  out[0] = xScale;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  out[3] = 0.0;\r\n  out[4] = 0.0;\r\n  out[5] = yScale;\r\n  out[6] = 0.0;\r\n  out[7] = 0.0;\r\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\r\n  out[9] = (upTan - downTan) * yScale * 0.5;\r\n  out[10] = far / (near - far);\r\n  out[11] = -1.0;\r\n  out[12] = 0.0;\r\n  out[13] = 0.0;\r\n  out[14] = far * near / (near - far);\r\n  out[15] = 0.0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function ortho(out, left, right, bottom, top, near, far) {\r\n  var lr = 1 / (left - right);\r\n  var bt = 1 / (bottom - top);\r\n  var nf = 1 / (near - far);\r\n  out[0] = -2 * lr;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = -2 * bt;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 2 * nf;\r\n  out[11] = 0;\r\n  out[12] = (left + right) * lr;\r\n  out[13] = (top + bottom) * bt;\r\n  out[14] = (far + near) * nf;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function lookAt(out, eye, center, up) {\r\n  var x0 = void 0,\r\n      x1 = void 0,\r\n      x2 = void 0,\r\n      y0 = void 0,\r\n      y1 = void 0,\r\n      y2 = void 0,\r\n      z0 = void 0,\r\n      z1 = void 0,\r\n      z2 = void 0,\r\n      len = void 0;\r\n  var eyex = eye[0];\r\n  var eyey = eye[1];\r\n  var eyez = eye[2];\r\n  var upx = up[0];\r\n  var upy = up[1];\r\n  var upz = up[2];\r\n  var centerx = center[0];\r\n  var centery = center[1];\r\n  var centerz = center[2];\r\n\r\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\r\n    return identity(out);\r\n  }\r\n\r\n  z0 = eyex - centerx;\r\n  z1 = eyey - centery;\r\n  z2 = eyez - centerz;\r\n\r\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\r\n  z0 *= len;\r\n  z1 *= len;\r\n  z2 *= len;\r\n\r\n  x0 = upy * z2 - upz * z1;\r\n  x1 = upz * z0 - upx * z2;\r\n  x2 = upx * z1 - upy * z0;\r\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\r\n  if (!len) {\r\n    x0 = 0;\r\n    x1 = 0;\r\n    x2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  y0 = z1 * x2 - z2 * x1;\r\n  y1 = z2 * x0 - z0 * x2;\r\n  y2 = z0 * x1 - z1 * x0;\r\n\r\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\r\n  if (!len) {\r\n    y0 = 0;\r\n    y1 = 0;\r\n    y2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    y0 *= len;\r\n    y1 *= len;\r\n    y2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = y0;\r\n  out[2] = z0;\r\n  out[3] = 0;\r\n  out[4] = x1;\r\n  out[5] = y1;\r\n  out[6] = z1;\r\n  out[7] = 0;\r\n  out[8] = x2;\r\n  out[9] = y2;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\r\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\r\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function targetTo(out, eye, target, up) {\r\n  var eyex = eye[0],\r\n      eyey = eye[1],\r\n      eyez = eye[2],\r\n      upx = up[0],\r\n      upy = up[1],\r\n      upz = up[2];\r\n\r\n  var z0 = eyex - target[0],\r\n      z1 = eyey - target[1],\r\n      z2 = eyez - target[2];\r\n\r\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    z0 *= len;\r\n    z1 *= len;\r\n    z2 *= len;\r\n  }\r\n\r\n  var x0 = upy * z2 - upz * z1,\r\n      x1 = upz * z0 - upx * z2,\r\n      x2 = upx * z1 - upy * z0;\r\n\r\n  len = x0 * x0 + x1 * x1 + x2 * x2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = x1;\r\n  out[2] = x2;\r\n  out[3] = 0;\r\n  out[4] = z1 * x2 - z2 * x1;\r\n  out[5] = z2 * x0 - z0 * x2;\r\n  out[6] = z0 * x1 - z1 * x0;\r\n  out[7] = 0;\r\n  out[8] = z0;\r\n  out[9] = z1;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = eyex;\r\n  out[13] = eyey;\r\n  out[14] = eyez;\r\n  out[15] = 1;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  out[9] = a[9] + b[9];\r\n  out[10] = a[10] + b[10];\r\n  out[11] = a[11] + b[11];\r\n  out[12] = a[12] + b[12];\r\n  out[13] = a[13] + b[13];\r\n  out[14] = a[14] + b[14];\r\n  out[15] = a[15] + b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  out[9] = a[9] - b[9];\r\n  out[10] = a[10] - b[10];\r\n  out[11] = a[11] - b[11];\r\n  out[12] = a[12] - b[12];\r\n  out[13] = a[13] - b[13];\r\n  out[14] = a[14] - b[14];\r\n  out[15] = a[15] - b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  out[9] = a[9] * b;\r\n  out[10] = a[10] * b;\r\n  out[11] = a[11] * b;\r\n  out[12] = a[12] * b;\r\n  out[13] = a[13] * b;\r\n  out[14] = a[14] * b;\r\n  out[15] = a[15] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  out[9] = a[9] + b[9] * scale;\r\n  out[10] = a[10] + b[10] * scale;\r\n  out[11] = a[11] + b[11] * scale;\r\n  out[12] = a[12] + b[12] * scale;\r\n  out[13] = a[13] + b[13] * scale;\r\n  out[14] = a[14] + b[14] * scale;\r\n  out[15] = a[15] + b[15] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7];\r\n  var a8 = a[8],\r\n      a9 = a[9],\r\n      a10 = a[10],\r\n      a11 = a[11];\r\n  var a12 = a[12],\r\n      a13 = a[13],\r\n      a14 = a[14],\r\n      a15 = a[15];\r\n\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  var b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7];\r\n  var b8 = b[8],\r\n      b9 = b[9],\r\n      b10 = b[10],\r\n      b11 = b[11];\r\n  var b12 = b[12],\r\n      b13 = b[13],\r\n      b14 = b[14],\r\n      b15 = b[15];\r\n\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function fromValues(x, y, z) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\r\nexport function set(out, x, y, z) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var len = x * x + y * y + z * z;\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n    out[2] = a[2] * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function cross(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2];\r\n\r\n  out[0] = ay * bz - az * by;\r\n  out[1] = az * bx - ax * bz;\r\n  out[2] = ax * by - ay * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function hermite(out, a, b, c, d, t) {\r\n  var factorTimes2 = t * t;\r\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\r\n  var factor2 = factorTimes2 * (t - 2) + t;\r\n  var factor3 = factorTimes2 * (t - 1);\r\n  var factor4 = factorTimes2 * (3 - 2 * t);\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function bezier(out, a, b, c, d, t) {\r\n  var inverseFactor = 1 - t;\r\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\r\n  var factorTimes2 = t * t;\r\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\r\n  var factor2 = 3 * t * inverseFactorTimesTwo;\r\n  var factor3 = 3 * factorTimes2 * inverseFactor;\r\n  var factor4 = factorTimes2 * t;\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\r\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\r\n\r\n  out[0] = Math.cos(r) * zScale;\r\n  out[1] = Math.sin(r) * zScale;\r\n  out[2] = z * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n  w = w || 1.0;\r\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  out[0] = x * m[0] + y * m[3] + z * m[6];\r\n  out[1] = x * m[1] + y * m[4] + z * m[7];\r\n  out[2] = x * m[2] + y * m[5] + z * m[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  // var qvec = [qx, qy, qz];\r\n  // var uv = vec3.cross([], qvec, a);\r\n  var uvx = qy * z - qz * y,\r\n      uvy = qz * x - qx * z,\r\n      uvz = qx * y - qy * x;\r\n  // var uuv = vec3.cross([], qvec, uv);\r\n  var uuvx = qy * uvz - qz * uvy,\r\n      uuvy = qz * uvx - qx * uvz,\r\n      uuvz = qx * uvy - qy * uvx;\r\n  // vec3.scale(uv, uv, 2 * w);\r\n  var w2 = qw * 2;\r\n  uvx *= w2;\r\n  uvy *= w2;\r\n  uvz *= w2;\r\n  // vec3.scale(uuv, uuv, 2);\r\n  uuvx *= 2;\r\n  uuvy *= 2;\r\n  uuvz *= 2;\r\n  // return vec3.add(out, a, vec3.add(out, uv, uuv));\r\n  out[0] = x + uvx + uuvx;\r\n  out[1] = y + uvy + uuvy;\r\n  out[2] = z + uvz + uuvz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateX(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0];\r\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\r\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateY(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\r\n  r[1] = p[1];\r\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateZ(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\r\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\r\n  r[2] = p[2];\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nexport function angle(a, b) {\r\n  var tempA = fromValues(a[0], a[1], a[2]);\r\n  var tempB = fromValues(b[0], b[1], b[2]);\r\n\r\n  normalize(tempA, tempA);\r\n  normalize(tempB, tempB);\r\n\r\n  var cosine = dot(tempA, tempB);\r\n\r\n  if (cosine > 1.0) {\r\n    return 0;\r\n  } else if (cosine < -1.0) {\r\n    return Math.PI;\r\n  } else {\r\n    return Math.acos(cosine);\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 3;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function fromValues(x, y, z, w) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\r\nexport function set(out, x, y, z, w) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  out[3] = a[3] * b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  out[3] = a[3] / b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  out[3] = Math.ceil(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  out[3] = Math.floor(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  out[3] = Math.min(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  out[3] = Math.max(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  out[3] = Math.round(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = -a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  out[3] = 1.0 / a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  var len = x * x + y * y + z * z + w * w;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = x * len;\r\n    out[1] = y * len;\r\n    out[2] = z * len;\r\n    out[3] = w * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  var aw = a[3];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  out[3] = aw + t * (b[3] - aw);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  // Marsaglia, George. Choosing a Point from the Surface of a\r\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\r\n  // http://projecteuclid.org/euclid.aoms/1177692644;\r\n  var v1, v2, v3, v4;\r\n  var s1, s2;\r\n  do {\r\n    v1 = glMatrix.RANDOM() * 2 - 1;\r\n    v2 = glMatrix.RANDOM() * 2 - 1;\r\n    s1 = v1 * v1 + v2 * v2;\r\n  } while (s1 >= 1);\r\n  do {\r\n    v3 = glMatrix.RANDOM() * 2 - 1;\r\n    v4 = glMatrix.RANDOM() * 2 - 1;\r\n    s2 = v3 * v3 + v4 * v4;\r\n  } while (s2 >= 1);\r\n\r\n  var d = Math.sqrt((1 - s1) / s2);\r\n  out[0] = scale * v1;\r\n  out[1] = scale * v2;\r\n  out[2] = scale * v3 * d;\r\n  out[3] = scale * v4 * d;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2],\r\n      w = a[3];\r\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\r\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\r\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\r\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n\r\n  // calculate quat * vec\r\n  var ix = qw * x + qy * z - qz * y;\r\n  var iy = qw * y + qz * x - qx * z;\r\n  var iz = qw * z + qx * y - qy * x;\r\n  var iw = -qx * x - qy * y - qz * z;\r\n\r\n  // calculate result * inverse quat\r\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 4;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];vec[3] = a[i + 3];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];a[i + 3] = vec[3];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\nimport * as mat3 from \"./mat3.js\";\r\nimport * as vec3 from \"./vec3.js\";\r\nimport * as vec4 from \"./vec4.js\";\r\n\r\n/**\r\n * Quaternion\r\n * @module quat\r\n */\r\n\r\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\r\nexport function setAxisAngle(out, axis, rad) {\r\n  rad = rad * 0.5;\r\n  var s = Math.sin(rad);\r\n  out[0] = s * axis[0];\r\n  out[1] = s * axis[1];\r\n  out[2] = s * axis[2];\r\n  out[3] = Math.cos(rad);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\r\nexport function getAxisAngle(out_axis, q) {\r\n  var rad = Math.acos(q[3]) * 2.0;\r\n  var s = Math.sin(rad / 2.0);\r\n  if (s > glMatrix.EPSILON) {\r\n    out_axis[0] = q[0] / s;\r\n    out_axis[1] = q[1] / s;\r\n    out_axis[2] = q[2] / s;\r\n  } else {\r\n    // If s is zero, return any axis (no rotation - axis does not matter)\r\n    out_axis[0] = 1;\r\n    out_axis[1] = 0;\r\n    out_axis[2] = 0;\r\n  }\r\n  return rad;\r\n}\r\n\r\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\r\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\r\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\r\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + aw * bx;\r\n  out[1] = ay * bw + az * bx;\r\n  out[2] = az * bw - ay * bx;\r\n  out[3] = aw * bw - ax * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var by = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw - az * by;\r\n  out[1] = ay * bw + aw * by;\r\n  out[2] = az * bw + ax * by;\r\n  out[3] = aw * bw - ay * by;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bz = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + ay * bz;\r\n  out[1] = ay * bw - ax * bz;\r\n  out[2] = az * bw + aw * bz;\r\n  out[3] = aw * bw - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\r\nexport function calculateW(out, a) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport function slerp(out, a, b, t) {\r\n  // benchmarks:\r\n  //    http://jsperf.com/quaternion-slerp-implementations\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  var omega = void 0,\r\n      cosom = void 0,\r\n      sinom = void 0,\r\n      scale0 = void 0,\r\n      scale1 = void 0;\r\n\r\n  // calc cosine\r\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\r\n  // adjust signs (if necessary)\r\n  if (cosom < 0.0) {\r\n    cosom = -cosom;\r\n    bx = -bx;\r\n    by = -by;\r\n    bz = -bz;\r\n    bw = -bw;\r\n  }\r\n  // calculate coefficients\r\n  if (1.0 - cosom > glMatrix.EPSILON) {\r\n    // standard case (slerp)\r\n    omega = Math.acos(cosom);\r\n    sinom = Math.sin(omega);\r\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n    scale1 = Math.sin(t * omega) / sinom;\r\n  } else {\r\n    // \"from\" and \"to\" quaternions are very close\r\n    //  ... so we can do a linear interpolation\r\n    scale0 = 1.0 - t;\r\n    scale1 = t;\r\n  }\r\n  // calculate final values\r\n  out[0] = scale0 * ax + scale1 * bx;\r\n  out[1] = scale0 * ay + scale1 * by;\r\n  out[2] = scale0 * az + scale1 * bz;\r\n  out[3] = scale0 * aw + scale1 * bw;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function random(out) {\r\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\r\n  // TODO: Calling random 3 times is probably not the fastest solution\r\n  var u1 = glMatrix.RANDOM();\r\n  var u2 = glMatrix.RANDOM();\r\n  var u3 = glMatrix.RANDOM();\r\n\r\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\r\n  var sqrtU1 = Math.sqrt(u1);\r\n\r\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\r\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\r\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\r\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\r\nexport function invert(out, a) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\r\n  var invDot = dot ? 1.0 / dot : 0;\r\n\r\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\r\n\r\n  out[0] = -a0 * invDot;\r\n  out[1] = -a1 * invDot;\r\n  out[2] = -a2 * invDot;\r\n  out[3] = a3 * invDot;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\r\nexport function conjugate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromMat3(out, m) {\r\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\r\n  // article \"Quaternion Calculus and Fast Animation\".\r\n  var fTrace = m[0] + m[4] + m[8];\r\n  var fRoot = void 0;\r\n\r\n  if (fTrace > 0.0) {\r\n    // |w| > 1/2, may as well choose w > 1/2\r\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\r\n    out[3] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot; // 1/(4w)\r\n    out[0] = (m[5] - m[7]) * fRoot;\r\n    out[1] = (m[6] - m[2]) * fRoot;\r\n    out[2] = (m[1] - m[3]) * fRoot;\r\n  } else {\r\n    // |w| <= 1/2\r\n    var i = 0;\r\n    if (m[4] > m[0]) i = 1;\r\n    if (m[8] > m[i * 3 + i]) i = 2;\r\n    var j = (i + 1) % 3;\r\n    var k = (i + 2) % 3;\r\n\r\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\r\n    out[i] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot;\r\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\r\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\r\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromEuler(out, x, y, z) {\r\n  var halfToRad = 0.5 * Math.PI / 180.0;\r\n  x *= halfToRad;\r\n  y *= halfToRad;\r\n  z *= halfToRad;\r\n\r\n  var sx = Math.sin(x);\r\n  var cx = Math.cos(x);\r\n  var sy = Math.sin(y);\r\n  var cy = Math.cos(y);\r\n  var sz = Math.sin(z);\r\n  var cz = Math.cos(z);\r\n\r\n  out[0] = sx * cy * cz - cx * sy * sz;\r\n  out[1] = cx * sy * cz + sx * cy * sz;\r\n  out[2] = cx * cy * sz - sx * sy * cz;\r\n  out[3] = cx * cy * cz + sx * sy * sz;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport var clone = vec4.clone;\r\n\r\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport var fromValues = vec4.fromValues;\r\n\r\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var copy = vec4.copy;\r\n\r\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var set = vec4.set;\r\n\r\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var add = vec4.add;\r\n\r\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var scale = vec4.scale;\r\n\r\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\r\nexport var dot = vec4.dot;\r\n\r\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var lerp = vec4.lerp;\r\n\r\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport var length = vec4.length;\r\n\r\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\r\nexport var squaredLength = vec4.squaredLength;\r\n\r\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var normalize = vec4.normalize;\r\n\r\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport var exactEquals = vec4.exactEquals;\r\n\r\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport var equals = vec4.equals;\r\n\r\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\r\nexport var rotationTo = function () {\r\n  var tmpvec3 = vec3.create();\r\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\r\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\r\n\r\n  return function (out, a, b) {\r\n    var dot = vec3.dot(a, b);\r\n    if (dot < -0.999999) {\r\n      vec3.cross(tmpvec3, xUnitVec3, a);\r\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\r\n      vec3.normalize(tmpvec3, tmpvec3);\r\n      setAxisAngle(out, tmpvec3, Math.PI);\r\n      return out;\r\n    } else if (dot > 0.999999) {\r\n      out[0] = 0;\r\n      out[1] = 0;\r\n      out[2] = 0;\r\n      out[3] = 1;\r\n      return out;\r\n    } else {\r\n      vec3.cross(tmpvec3, a, b);\r\n      out[0] = tmpvec3[0];\r\n      out[1] = tmpvec3[1];\r\n      out[2] = tmpvec3[2];\r\n      out[3] = 1 + dot;\r\n      return normalize(out, out);\r\n    }\r\n  };\r\n}();\r\n\r\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport var sqlerp = function () {\r\n  var temp1 = create();\r\n  var temp2 = create();\r\n\r\n  return function (out, a, b, c, d, t) {\r\n    slerp(temp1, a, d, t);\r\n    slerp(temp2, b, c, t);\r\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\r\n\r\n    return out;\r\n  };\r\n}();\r\n\r\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\r\nexport var setAxes = function () {\r\n  var matr = mat3.create();\r\n\r\n  return function (out, view, right, up) {\r\n    matr[0] = right[0];\r\n    matr[3] = right[1];\r\n    matr[6] = right[2];\r\n\r\n    matr[1] = up[0];\r\n    matr[4] = up[1];\r\n    matr[7] = up[2];\r\n\r\n    matr[2] = -view[0];\r\n    matr[5] = -view[1];\r\n    matr[8] = -view[2];\r\n\r\n    return normalize(out, fromMat3(out, matr));\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\r\n\r\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[5] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[4] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\r\nexport function fromMat4(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[4];\r\n  out[4] = a[5];\r\n  out[5] = a[6];\r\n  out[6] = a[8];\r\n  out[7] = a[9];\r\n  out[8] = a[10];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\r\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\r\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a12 = a[5];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a01;\r\n    out[5] = a[7];\r\n    out[6] = a02;\r\n    out[7] = a12;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a[1];\r\n    out[4] = a[4];\r\n    out[5] = a[7];\r\n    out[6] = a[2];\r\n    out[7] = a[5];\r\n    out[8] = a[8];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b01 = a22 * a11 - a12 * a21;\r\n  var b11 = -a22 * a10 + a12 * a20;\r\n  var b21 = a21 * a10 - a11 * a20;\r\n\r\n  // Calculate the determinant\r\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = b01 * det;\r\n  out[1] = (-a22 * a01 + a02 * a21) * det;\r\n  out[2] = (a12 * a01 - a02 * a11) * det;\r\n  out[3] = b11 * det;\r\n  out[4] = (a22 * a00 - a02 * a20) * det;\r\n  out[5] = (-a12 * a00 + a02 * a10) * det;\r\n  out[6] = b21 * det;\r\n  out[7] = (-a21 * a00 + a01 * a20) * det;\r\n  out[8] = (a11 * a00 - a01 * a10) * det;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  out[0] = a11 * a22 - a12 * a21;\r\n  out[1] = a02 * a21 - a01 * a22;\r\n  out[2] = a01 * a12 - a02 * a11;\r\n  out[3] = a12 * a20 - a10 * a22;\r\n  out[4] = a00 * a22 - a02 * a20;\r\n  out[5] = a02 * a10 - a00 * a12;\r\n  out[6] = a10 * a21 - a11 * a20;\r\n  out[7] = a01 * a20 - a00 * a21;\r\n  out[8] = a00 * a11 - a01 * a10;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\r\n}\r\n\r\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b00 = b[0],\r\n      b01 = b[1],\r\n      b02 = b[2];\r\n  var b10 = b[3],\r\n      b11 = b[4],\r\n      b12 = b[5];\r\n  var b20 = b[6],\r\n      b21 = b[7],\r\n      b22 = b[8];\r\n\r\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\r\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\r\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\r\n\r\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\r\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\r\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\r\n\r\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\r\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\r\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = a00;\r\n  out[1] = a01;\r\n  out[2] = a02;\r\n\r\n  out[3] = a10;\r\n  out[4] = a11;\r\n  out[5] = a12;\r\n\r\n  out[6] = x * a00 + y * a10 + a20;\r\n  out[7] = x * a01 + y * a11 + a21;\r\n  out[8] = x * a02 + y * a12 + a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function rotate(out, a, rad) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c * a00 + s * a10;\r\n  out[1] = c * a01 + s * a11;\r\n  out[2] = c * a02 + s * a12;\r\n\r\n  out[3] = c * a10 - s * a00;\r\n  out[4] = c * a11 - s * a01;\r\n  out[5] = c * a12 - s * a02;\r\n\r\n  out[6] = a20;\r\n  out[7] = a21;\r\n  out[8] = a22;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = x * a[0];\r\n  out[1] = x * a[1];\r\n  out[2] = x * a[2];\r\n\r\n  out[3] = y * a[3];\r\n  out[4] = y * a[4];\r\n  out[5] = y * a[5];\r\n\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = v[0];\r\n  out[7] = v[1];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function fromRotation(out, rad) {\r\n  var s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n\r\n  out[3] = -s;\r\n  out[4] = c;\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n\r\n  out[3] = 0;\r\n  out[4] = v[1];\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\r\nexport function fromMat2d(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = 0;\r\n\r\n  out[3] = a[2];\r\n  out[4] = a[3];\r\n  out[5] = 0;\r\n\r\n  out[6] = a[4];\r\n  out[7] = a[5];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[3] = yx - wz;\r\n  out[6] = zx + wy;\r\n\r\n  out[1] = yx + wz;\r\n  out[4] = 1 - xx - zz;\r\n  out[7] = zy - wx;\r\n\r\n  out[2] = zx - wy;\r\n  out[5] = zy + wx;\r\n  out[8] = 1 - xx - yy;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function normalFromMat4(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\r\nexport function projection(out, width, height) {\r\n  out[0] = 2 / width;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -2 / height;\r\n  out[5] = 0;\r\n  out[6] = -1;\r\n  out[7] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7],\r\n      a8 = a[8];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7],\r\n      b8 = b[8];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","export const COMPONENT = Object.freeze({\n    SIZE: Object.freeze({\n        '5120': 1,\n        '5121': 1,\n        '5122': 2,\n        '5123': 2,\n        '5125': 4,\n        '5126': 4\n    }),\n    TYPE: Object.freeze({\n        BYTE: 5120,\n        UNSIGNED_BYTE: 5121,\n        SHORT: 5122,\n        UNSIGNED_SHORT: 5123,\n        UNSIGNED_INT: 5125,\n        FLOAT: 5126\n    }),\n    ID: Object.freeze({\n        '5120': 'BYTE',\n        '5121': 'UNSIGNED_BYTE',\n        '5122': 'SHORT',\n        '5123': 'UNSIGNED_SHORT',\n        '5125': 'UNSIGNED_INT',\n        '5126': 'FLOAT'\n    })\n});\n\nexport const TYPE = Object.freeze({\n    SCALAR: 1,\n    VEC2: 2,\n    VEC3: 3,\n    VEC4: 4,\n    MAT2: 4,\n    MAT3: 9,\n    MAT4: 16\n});\n\nexport const PROJECTION = Object.freeze({\n    ORTHOGRAPHIC: 'orthographic',\n    PERSPECTIVE: 'perspective'\n});\n\nexport const ATTRIBUTE_LOCATION = Object.freeze({\n    POSITION: 0,\n    NORMAL: 1,\n    TEXCOORD_0: 2,\n    JOINTS_0: 3,\n    JOINTS_1: 5,\n    WEIGHTS_0: 4,\n    WEIGHTS_1: 6,\n    TANGENT: 7\n});\n\nexport const VALID_ACCESSOR_TYPES = Object.freeze({\n    INDEX: { type: ['SCALAR'], componentType: [COMPONENT.TYPE.UNSIGNED_BYTE, COMPONENT.TYPE.UNSIGNED_SHORT, COMPONENT.TYPE.UNSIGNED_INT] },\n    POSITION: { type: ['VEC3'], componentType: [COMPONENT.TYPE.FLOAT] },\n    NORMAL: { type: ['VEC3'], componentType: [COMPONENT.TYPE.FLOAT] },\n    TANGENT: { type: ['VEC4'], componentType: [COMPONENT.TYPE.FLOAT] },\n    TEXCOORD_0: { type: ['VEC2'], componentType: [COMPONENT.TYPE.FLOAT, COMPONENT.TYPE.UNSIGNED_BYTE, COMPONENT.TYPE.UNSIGNED_SHORT] },\n    TEXCOORD_1: { type: ['VEC2'], componentType: [COMPONENT.TYPE.FLOAT, COMPONENT.TYPE.UNSIGNED_BYTE, COMPONENT.TYPE.UNSIGNED_SHORT] },\n    COLOR_0: { type: ['VEC3', 'VEC4'], componentType: [COMPONENT.TYPE.FLOAT, COMPONENT.TYPE.UNSIGNED_BYTE, COMPONENT.TYPE.UNSIGNED_SHORT] },\n    JOINTS_0: { type: ['VEC4'], componentType: [COMPONENT.TYPE.UNSIGNED_BYTE, COMPONENT.TYPE.UNSIGNED_SHORT] },\n    WEIGHTS_0: { type: ['VEC4'], componentType: [COMPONENT.TYPE.FLOAT, COMPONENT.TYPE.UNSIGNED_BYTE, COMPONENT.TYPE.UNSIGNED_SHORT] }\n});\n\nexport const TARGET = Object.freeze({\n    ELEMENT_ARRAY_BUFFER: 34963,\n    ARRAY_BUFFER: 34962\n});","\nfunction compile(gl, source, type) {\n    let shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        throw Error(gl.getShaderInfoLog(shader));\n    }\n\n    return shader;\n}\n\nexport default (gl, vertexShaderSource, fragmentShaderSource) => {\n\n    let vertexShader = compile(gl, vertexShaderSource, gl.VERTEX_SHADER);\n    let fragmentShader = compile(gl, fragmentShaderSource, gl.FRAGMENT_SHADER);\n\n    let program = gl.createProgram();\n\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        throw Error('Error when building shaders.');\n    }\n\n    return program;\n\n};","\nimport { mat4 } from 'gl-matrix';\n\nimport { ATTRIBUTE_LOCATION, TYPE, COMPONENT } from './constants';\n\nimport buildShaderFromSource from './shader-builder';\nimport basicVertexShaderSource from '../shaders/basic-vertex-shader.glsl';\nimport basicFragmentShaderSource from '../shaders/basic-fragment-shader.glsl';\n\nfunction updateWorldMatrix(node) {\n\n    if (node.parent !== null) {\n        // Multiply the localMatrix of this node with the worldMatrix of its parent.\n        mat4.multiply(node.worldMatrix, node.parent.worldMatrix, node.matrix);\n    } else {\n        //Just set the localMatrix as the worldMatrix since this node does not have a parent\n        mat4.copy(node.worldMatrix, node.matrix);\n    }\n\n    node.needsUpdate = false;\n\n    // Propagate the update downwards in the scene tree \n    //(the children will use this node's worldMatrix in the tick)\n    for (let i = 0; i < node.children.length; i++) {\n        updateWorldMatrix(node.children[i]);\n    }\n\n}\n\nfunction initializeContext(width, height) {\n\n    const gl = document.createElement('canvas').getContext('webgl2');\n\n    const domElement = gl.canvas;\n    domElement.width = width;\n    domElement.height = height;\n\n    if (!gl) {\n        throw Error('WebGL 2.0 isn\\'t available');\n    }\n\n    gl.viewport(0, 0, domElement.width, domElement.height);\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);\n    gl.enable(gl.DEPTH_TEST);\n    gl.enable(gl.CULL_FACE);\n\n    return gl;\n\n}\n\nexport default (width, height) => {\n\n    let gl = initializeContext(width, height);\n\n    const program = buildShaderFromSource(gl, basicVertexShaderSource, basicFragmentShaderSource);\n    gl.useProgram(program);\n\n    let realm = {\n\n        gl,\n\n        buffers: [],\n        bufferViews: [],\n        accessors: [],\n        cameras: [],\n        meshes: [],\n        nodes: [],\n        scenes: [],\n\n        scene: null,\n\n        updateTransforms() {\n\n            const nodes = this.scenes[this.scene].nodes;\n\n            for (let i = 0; i < nodes.length; i++) {\n                if (nodes[i].needsUpdate) {\n\n                    updateWorldMatrix(nodes[i]);\n\n                }\n            }\n\n        },\n\n        acquireRenderQueue() {\n\n            // TODO: perform frustum culling based on camera (passed as parameter)\n\n            let drawables = [];\n\n            for (let i = 0; i < this.nodes.length; i++) {\n\n                const node = this.nodes[i];\n\n                if (typeof node.mesh !== 'undefined') {\n\n                    for (let j = 0; j < this.meshes[node.mesh].primitives.length; j++) {\n\n                        drawables.push([\n                            this.meshes[node.mesh].primitives[j],\n                            node.worldMatrix\n                        ]);\n    \n                    }\n\n                }\n\n            }\n\n            // TODO: perform sorting, front to back, transparency, material-id, etc..\n\n            return drawables;\n\n        },\n\n        loadFromGLTF(document, setScene = false) {\n\n            this.buffers = document.buffers;\n            this.bufferViews = document.bufferViews;\n            this.accessors = document.accessors;\n            this.cameras = document.cameras;\n            this.meshes = document.meshes;\n            this.nodes = document.nodes;\n            this.scenes = document.scenes;\n\n            if (setScene) {\n                this.scene = document.scene;\n            }\n\n            for (let i = 0; i < this.meshes.length; i++) {\n                for (let j = 0; j < this.meshes[i].primitives.length; j++) {\n\n                    this.load(this.meshes[i].primitives[j]);\n\n                }\n            }\n\n        },\n        \n        /**\n         * \n         * @param {*} n Primitive\n         */\n        load(primitive) {\n\n            if (primitive.vao) {\n\n                // the primitive has already been loaded.\n                return;\n\n            }\n\n            // setup VAO:\n\n            let vao = gl.createVertexArray();\n            gl.bindVertexArray(vao);\n\n            if (primitive.indices) {\n\n                let accessor = this.accessors[primitive.indices];\n                let bufferView = this.bufferViews[accessor.bufferView];\n\n                if (bufferView.element_array_buffer) {\n\n                    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferView.element_array_buffer);\n\n                    // the bufferView is already loaded, increment access count.\n                    bufferView.bufferAccessCount += 1;\n\n                } else {\n\n                    // create buffer and upload data.\n\n                    let buffer = gl.createBuffer();\n                    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);\n\n                    let dataView = new DataView(this.buffers[bufferView.buffer], bufferView.byteOffset, bufferView.byteLength);\n\n                    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, dataView, gl.STATIC_DRAW);\n\n                    bufferView.element_array_buffer = buffer;\n                    bufferView.bufferAccessCount = 1; // number of accessors linking to this buffer.\n\n                }\n\n            }\n\n            // create and link attribute accessors, and possibly upload bufferView to GPU.\n\n            for (let name in primitive.attributes) {\n\n                let accessor = this.accessors[primitive.attributes[name]];\n                let bufferView = this.bufferViews[accessor.bufferView];\n\n                console.log(accessor, bufferView);\n\n                if (bufferView.array_buffer) {\n\n                    gl.bindBuffer(gl.ARRAY_BUFFER, bufferView.array_buffer);\n\n                    // the bufferView is already loaded, increment access count.\n                    bufferView.bufferAccessCount += 1;\n\n                } else {\n\n                    // create buffer and upload data.\n\n                    let buffer = gl.createBuffer();\n                    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\n                    let dataView = new DataView(this.buffers[bufferView.buffer], bufferView.byteOffset, bufferView.byteLength);\n\n                    gl.bufferData(gl.ARRAY_BUFFER, dataView, gl.STATIC_DRAW);\n\n                    // setup and enable vertex attributes (Using the predefined and constant locations.)\n                    gl.vertexAttribPointer(ATTRIBUTE_LOCATION[name], TYPE[accessor.type], accessor.componentType, accessor.normalized, bufferView.byteStride, accessor.byteOffset);\n                    gl.enableVertexAttribArray(ATTRIBUTE_LOCATION[name]);\n\n                    bufferView.array_buffer = buffer;\n                    bufferView.bufferAccessCount = 1; // number of accessors linking to this buffer.\n\n                }\n            }\n\n            primitive.vao = vao;\n\n        },\n\n        draw(drawable, viewMatrix) {\n\n            const primitive = drawable[0];\n            const worldMatrix = drawable[1];\n            \n            let modelViewMatrix = mat4.multiply(mat4.create(), viewMatrix, worldMatrix);\n\n            gl.uniformMatrix4fv(gl.getUniformLocation(program, 'modelViewMatrix'), false, modelViewMatrix);\n\n            if (primitive.vao) {\n\n                gl.bindVertexArray(primitive.vao);\n\n                if (primitive.indices) {\n\n                    const offset = primitive.indices.byteOffset / COMPONENT.SIZE[primitive.indices.componentType];\n                    gl.drawElements(primitive.mode, primitive.indices.count, primitive.indices.componentType, offset);\n\n                } else {\n\n                    gl.drawArrays(gl.TRIANGLES, 0, primitive.attributes.POSITION.count / 3);\n\n                }\n\n            } else {\n\n                throw Error('Attempted to draw primitive with no VAO (Is the mesh loaded?).');\n\n            }\n\n        },\n\n        render(renderQueue, cameraNode) {\n\n            gl.clearColor(1.0, 1.0, 1.0, 1.0);\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n            const camera = this.cameras[cameraNode.camera];\n            const projectionMatrix = mat4.perspective(mat4.create(), camera.perspective.yfov, camera.perspective.aspectRatio, camera.perspective.znear, camera.perspective.zfar);\n            gl.uniformMatrix4fv(gl.getUniformLocation(program, 'projectionMatrix'), false, projectionMatrix);\n\n            const viewMatrix = mat4.invert(mat4.create(), cameraNode.worldMatrix);\n\n            for (let i = 0; i < renderQueue.length; i++) {\n                this.draw(renderQueue[i], viewMatrix);\n            }\n\n        },\n\n    };\n\n\n\n    return realm;\n\n};","import { mat4, vec3, quat } from 'gl-matrix';\n\nconst GLTF_VERSION = '2.0';\nconst SUPPORTED_VERSION = GLTF_VERSION.split('.').map(a => parseInt(a));\n\nexport default async (raw) => {\n\n    const document = JSON.parse(raw);\n\n    let version = (document.asset.minVersion ? document.asset.minVersion : document.asset.version).split('.').map(a => parseInt(a));\n\n    if (SUPPORTED_VERSION[0] !== version[0]) {\n        // TODO: give feedback, major version is incompatible.\n        return null;\n    }\n\n    if (document.asset.minVersion && SUPPORTED_VERSION[1] < version[1]) {\n        // TODO: give feedback, minor version is incompatible.\n        return null;\n    }\n\n    // remove asset\n    delete document.asset;\n\n\n    // load buffers.\n    document.buffers = await Promise.all(document.buffers.map(({ uri }) => {\n        return fetch(uri).then(res => res.arrayBuffer()); // use fetch to gelt data from uri.\n    }));\n\n    document.nodes = document.nodes.map((node) => {\n        if (!node.matrix) {\n\n            let rotation = node.rotation ? quat.fromValues(...node.rotation) : quat.create();\n            let translation = node.translation ? vec3.fromValues(...node.translation) : vec3.create();\n            let scale = node.scale ? vec3.fromValues(...node.scale) : vec3.create();\n\n            node.matrix = mat4.fromRotationTranslationScale(mat4.create(), rotation, translation, scale);\n\n        } else {\n\n            let matrix = mat4.fromValues(...node.matrix);\n            node.matrix = matrix;\n\n        }\n\n        node.worldMatrix = mat4.create();\n        node.needsUpdate = true;\n\n        return node;\n\n    });\n\n    return document;\n};","/**\n * Warp\n * A super simple WebGL2 javascript library.\n * Written by Oskar Bråten, 13/10/2017.\n * ported to webpack and gl-matrix, 07/06/2018\n */\n\nimport realm from './lib/core/realm';\nimport importGLTF from './lib/importer/gltf';\n\nexport default {\n    realm,\n    importGLTF\n};\n"],"sourceRoot":""}